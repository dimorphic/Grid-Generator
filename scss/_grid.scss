/**
 * grid.scss
 *
 *
 * @author Mihnea Belcin
 */

/*------------------------------------*\
    GRID SYSTEM
\*------------------------------------*/


@mixin grid($column) {
  .col-#{$column} {
    width: 100% / $column;
  }
}

@mixin distributedGrid($columnCount, $gridCount) {
  .col-#{$columnCount}o#{$gridCount} {
    width: number($columnCount) / number($gridCount) * 100%;
  }
}


@mixin responsiveGrid($type, $config) {
    $columnCount: map-get($config, 'columnCount');
    $columnDistribution: map-get($config, 'columnDistribution');

    @include responsive($type) {

      @if map-has-key($config, 'columnCount') {
        .grid {
          $columnArray: map-get($config, 'columnCount');
          @each $column in $columnArray {
            $columnCount: nth($columnArray, index($columnArray, $column));

            // @include grid($columnCount);
            .col-#{$type}-#{$columnCount} {
              width: columnWidth($column);
            }
          }
        }
      }

      @if map-has-key($config, 'columnVariations') {
        .grid {
          $columnVariations: map-get($config, 'columnVariations');
          @each $column in $columnVariations {
            $columnVariation: nth($columnVariations, index($columnVariations, $column));
            $columnCount: str-slice($columnVariation, 0,1);
            $gridCount: str-slice($columnVariation, 3,4);

            // @include distributedGrid($columnCount, $gridCount);
            .col-#{$type}-#{$columnCount}o#{$gridCount} {
              width: columnWidth($columnCount, $gridCount);
            }
          }
        }
      }
    }
}


$gridInit: 0;
@mixin generateGrid($config) {
  @if $gridInit == 0 {
    $gridInit: 1 !global;
    .grid {
      width: inherit;
    }
      .grid [class*='col-'] {
        float: left;
      }
  }

  // EQUAL COLUMNS
  @if map-has-key($config, 'columnCount') {
    .grid {
      $columnArray: map-get($config, 'columnCount');
      @each $column in $columnArray {
        $columnCount: nth($columnArray, index($columnArray, $column));

        // @include grid($columnCount);
        .col-#{$column} {
          width: columnWidth($column);
        }
      }
    }
  }


  // DISTRIBUTED COLUMNS
  @if map-has-key($config, 'columnVariations') {
    .grid {
      $columnVariations: map-get($config, 'columnVariations');
      @each $column in $columnVariations {
        $columnVariation: nth($columnVariations, index($columnVariations, $column));
        $columnCount: str-slice($columnVariation, 0,1);
        $gridCount: str-slice($columnVariation, 3,4);

        // @include distributedGrid($columnCount, $gridCount);
        .col-#{$columnCount}o#{$gridCount} {
          width: columnWidth($columnCount, $gridCount);
        }
      }
    }
  }


  // RESPONSIVE 
  $responsiveBreakpoints: (
    mobile:  true,
    tablet:  true,
    desktop: true
  );
  @each $type in map-keys($config) {
    @if map-has-key($responsiveBreakpoints, $type) {
      @include responsiveGrid($type, map-get($config, $type));
    }
    
  }
}


@function columnWidth($count, $total: 1) {
  @if $total == 1 {
    @return (100% / $count);  
  } @else {
    @return (number($count) / number($total) * 100%);
  }
  
}

@function number($string) {
  $strings: "0" "1" "2" "3" "4" "5" "6" "7" "8" "9";
  $numbers:  0   1   2   3   4   5   6   7   8   9;
  $result: 0;

  @for $i from 1 through 10 {
    @if $string == nth($strings, $i) {
      $result: nth($numbers, $i);
    }
  }

  @return $result;
}


